<?php
/**
 * Dev Test
 *
 * @author Joubert RedRat <me+github@redrat.com.br>
 */

namespace AppBundle\Repository;

use Application\Domain\Model\CpfBlacklistInterface;
use Application\Domain\Repository\CpfBlacklistRepositoryInterface;
use Doctrine\ORM\EntityRepository;

/**
 * Cpf Blacklist Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package AppBundle\Repository
 */
class CpfBlacklistRepository extends EntityRepository implements CpfBlacklistRepositoryInterface
{
    /**
     * {@inheritdoc}
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function add(CpfBlacklistInterface $cpfBlacklist): CpfBlacklistInterface
    {
        $entityManager = $this->getEntityManager();
        $entityManager->persist($cpfBlacklist);
        $entityManager->flush();

        return $cpfBlacklist;
    }

    /**
     * {@inheritdoc}
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update(CpfBlacklistInterface $cpfBlacklist): CpfBlacklistInterface
    {
        $entityManager = $this->getEntityManager();
        $entityManager->persist($cpfBlacklist);
        $entityManager->flush($cpfBlacklist);

        return $cpfBlacklist;
    }

    /**
     * {@inheritdoc}
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete(CpfBlacklistInterface $cpfBlacklist): bool
    {
        $entityManager = $this->getEntityManager();
        $entityManager->remove($cpfBlacklist);
        $entityManager->flush($cpfBlacklist);

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function get(int $id): ?CpfBlacklistInterface
    {
        /** @var CpfBlacklistInterface $cpfBlacklist */
        $cpfBlacklist = $this->find($id);

        return $cpfBlacklist;
    }

    /**
     * {@inheritdoc}
     */
    public function getByNumber(string $number): ?CpfBlacklistInterface
    {
        /** @var CpfBlacklistInterface $cpfBlacklist */
        $cpfBlacklist = $this->findOneBy(['number' => $number]);

        return $cpfBlacklist;
    }

    /**
     * {@inheritdoc}
     */
    public function list(): array
    {
        return $this->findAll();
    }

    /**
     * {@inheritdoc}
     */
    public function countBlacklist(): int
    {
        $queryBuilder = $this->createQueryBuilder('b');

        $data = $queryBuilder
            ->select('COUNT(b.id) AS total')
            ->getQuery()
            ->getResult()
        ;

        return (int) $data[0]['total'];
    }
}
